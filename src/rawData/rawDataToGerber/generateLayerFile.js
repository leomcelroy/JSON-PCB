import { generateRegionsData } from "./generateRegionsData.js";
import { generateTracesData } from "./generateTracesData.js";

export function generateLayerFile({
  unitConversionFactor,
  projectName,
  layerData,
  apertures,
  layerName,
}) {
  const filename = generateFilename(projectName, layerName);

  const content = [
    ...generateHeader(layerName),
    ...generateBody(layerData, apertures, unitConversionFactor),
  ];

  return [filename, content.join("\n")];
}

function generateFilename(projectName, layerName) {
  const useProtel = false;

  let filename = projectName ?? "anon";

  if (useProtel) {
    switch (layerName) {
      case "F.Cu":
        filename += ".GTL";
        break;
      case "B.Cu":
        filename += ".GBL";
        break;
      case "F.Mask":
        filename += ".GTS";
        break;
      case "B.Mask":
        filename += ".GBS";
        break;
      case "F.Silkscreen":
        filename += ".GTO";
        break;
      case "B.Silkscreen":
        filename += ".GBO";
        break;
      // case "Edge.Cuts":
      //   filename += ".GKO";
      //   break;
      // case "Drills":
      //   filename += ".XLN";
      //   break;
      default:
        // Default fallback
        filename += `-${layerName.replace(".", "_")}.gbr`;
        break;
    }
  } else {
    filename += `-${layerName.replace(".", "_")}.gbr`;
  }

  return filename;
}

function generateHeader(layer) {
  const header = [];

  // For copper layers we need to figure out how many there are.
  // If we have only top and bottom, the Gerber FileFunction values can be as follows.
  // - Copper,L1,Top
  // - Copper,L2,Bot
  // For a 4 layer board, things get a bit more complicated.
  // - Copper,L1,Top
  // - Copper,L2,Inr
  // - Copper,L3,Inr
  // - Copper,L4,Bot
  // In order to give the right layer numbers to F.Cu and B.Cu, we need to know total number of layers.
  // For now we support only 2 layers and time will show...

  // header.push(`%TF.GenerationSoftware,Leo McElroy,JSON PCB,v0.0.1*%`)
  // header.push(`%TF.CreationDate,${new Date().toISOString()}`);
  header.push(`%TF.SameCoordinates*%`);

  // TODO: only two layer right now
  if (layer === "F.Mask") {
    header.push(`%TF.FileFunction,Soldermask,Top*%`);
    header.push(`%TF.FilePolarity,Negative*%`);
  } else if (layer === "B.Mask") {
    header.push(`%TF.FileFunction,Soldermask,Bot*%`);
    header.push(`%TF.FilePolarity,Negative*%`);
  } else if (layer === "F.Cu") {
    header.push(`%TF.FileFunction,Copper,L1,Top*%`);
    header.push(`%TF.FilePolarity,Positive*%`);
  } else if (layer === "B.Cu") {
    header.push(`%TF.FileFunction,Copper,L2,Bot*%`);
    header.push(`%TF.FilePolarity,Positive*%`);
  } else if (layer === "F.Silkscreen") {
    header.push(`%TF.FileFunction,Legend,Top*%`);
    header.push(`%TF.FilePolarity,Positive*%`);
  } else if (layer === "B.Silkscreen") {
    header.push(`%TF.FileFunction,Legend,Bot*%`);
    header.push(`%TF.FilePolarity,Positive*%`);
  } else {
    console.log("Unknown Layer Name:", layer);
  }

  header.push(
    "G04 Generated by generateGerberFiles*",
    "%MOMM*%",
    "%FSLAX36Y36*%"
  );

  return header;
}

function generateBody(layerData, apertures, unitConversionFactor) {
  const gerberData = [];

  apertures.forEach((apertureDiameter, i) => {
    const dCode = 10 + i;
    const size = (apertureDiameter * unitConversionFactor).toFixed(4);
    gerberData.push(`%ADD${dCode}C,${size}*%`);
  });

  gerberData.push(
    "%LPD*%",
    ...generateRegionsData(layerData.positive.regions, unitConversionFactor),
    ...generateTracesData(layerData.positive.traces, unitConversionFactor),
    "%LPC*%",
    ...generateRegionsData(layerData.negative.regions, unitConversionFactor),
    ...generateTracesData(layerData.negative.traces, unitConversionFactor),
    "M02*"
  );

  return gerberData;
}
